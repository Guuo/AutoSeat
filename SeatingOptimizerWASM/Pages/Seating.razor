@page "/seating"
@using System.Collections.Generic;
@using SeatingOptimizer;

<div class="seating-container">
    <div class="controls-panel">
        <div class="input-group">
            <label>
                Pöydän pituus istuinpareina:
                <input type="number" min="2" max="12" @bind="TableLength" />
            </label>
            <button class="btn btn-primary" @onclick="@CalculateSeating">Etsi istumajärjestys</button>
        </div>
        
        <div class="input-group">
            <InputFile OnChange="LoadFiles" />
        </div>
        
        <div class="input-group">
            <label>
                Nimisarake:
                <input type="text" @bind="NameColumnName" placeholder="Sarakkeen nimi tähän" />
            </label>
            <label>
                Vierustoveritoiveiden sarake:
                <input type="text" @bind="RequestedAdjacentPeopleColumnName" placeholder="Sarakkeen nimi tähän" />
            </label>
        </div>
    </div>

    <div class="tables-container">
        @for (int tableIndex = 0; tableIndex < Tables.Count; tableIndex++)
        {
            var currentTable = Tables[tableIndex];
            <div class="table-section">
                <h3>Table @(tableIndex + 1)</h3>
                <div class="table-visualization" style="@TableStyle">
                    @for (int i = 0; i < TableLength * 2; i++)
                    { 
                        var seatIndex = i + (tableIndex * TableLength * 2);
                        <div class="seat @GetSeatPosition(i) @(SelectedSeatIndex == seatIndex ? "selected" : "")"
                             @onclick="() => SelectSeat(seatIndex)">
                            @(currentTable.Count > i ? currentTable[i] : "Empty")
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    
<div class="error-container">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-alert">
            <span class="error-icon">⚠️</span>
            <span class="error-text">@errorMessage</span>
            <button class="close-button" @onclick="ClearError">×</button>
        </div>
    }

    @if (SelectedSeatIndex != -1)
    {
        <div class="seat-detail">
            <h3>Selected Seat Information</h3>
            <p>Person: @GetSelectedPerson()</p>
            <p>Table: @(GetSelectedTableNumber())</p>
            <p>Adjacent to:</p>
            <ul>
                @foreach (var adjacent in GetAdjacentSeats(SelectedSeatIndex))
                {
                    <li>@adjacent</li>
                }
            </ul>
        </div>
    }
    </div>
</div>

<style>
    .seating-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .controls-panel {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 30px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .input-group {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .input-group label {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .input-group input {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .tables-container {
        display: flex;
        flex-direction: column;
        gap: 40px;
        width: 100%;
    }

    .table-section {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .table-visualization {
        position: relative;
        border: 3px solid #654321;
        padding: 20px;
        display: grid;
        gap: 10px;
        margin: 20px 0;
        background-color: #f5e6d3;
        border-radius: 4px;
        width: 100%;
        overflow-x: auto;
    }

    .seat {
        min-width: 100px;
        height: 50px;
        border: 1px solid #333;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #ffffff;
        cursor: pointer;
        transition: all 0.3s;
        border-radius: 4px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        text-align: center;
        padding: 5px;
        word-break: break-word;
    }

    .seat:hover {
        background-color: #e8f0fe;
        transform: translateY(-2px);
    }

    .seat.selected {
        background-color: #e3f2fd;
        border: 2px solid #1976d2;
    }

    .seat.top {
        grid-row: 1;
    }

    .seat.bottom {
        grid-row: 2;
    }

    .seat-detail {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        margin-top: 30px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .error-container {
            padding: 20px;
        }

        .error-alert {
            background-color: #ffe6e6;
            border: 1px solid #ff8080;
            border-radius: 4px;
            padding: 12px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            animation: slideIn 0.3s ease-out;
        }

        @@keyframes slideIn {
            from {
                transform: translateY(-20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .error-icon {
            margin-right: 10px;
        }

        .error-text {
            flex-grow: 1;
            color: #cc0000;
        }

        .close-button {
            background: none;
            border: none;
            color: #666;
            font-size: 20px;
            cursor: pointer;
            padding: 0 4px;
        }

        .close-button:hover {
            color: #333;
        }

    @@media (max-width: 768px) {
        .table-visualization {
            padding: 10px;
            gap: 5px;
        }

        .seat {
            min-width: 80px;
            height: 40px;
            font-size: 0.9em;
        }

        .input-group {
            flex-direction: column;
            gap: 10px;
        }
    }
</style>

@code {
    private string NameColumnName { get; set; } = String.Empty;
    private string RequestedAdjacentPeopleColumnName { get; set; } = String.Empty;
    private int TableLength { get; set; } = 4;
    private List<List<string>> Tables { get; set; } = new();
    private int SelectedSeatIndex { get; set; } = -1;
    private string CsvData { get; set; } = string.Empty;
    private string? errorMessage = string.Empty;

    private string TableStyle => $"grid-template-columns: repeat({TableLength}, minmax(80px, 1fr));";

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        Stream fs = e.File.OpenReadStream(1024*10);
        byte[] buffer = new byte[fs.Length];
        await fs.ReadAsync(buffer, 0, (int)fs.Length);
        CsvData = System.Text.Encoding.UTF8.GetString(buffer);
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    private string GetSeatPosition(int index)
    {
        return index < TableLength ? "top" : "bottom";
    }

    private void SelectSeat(int index)
    {
        SelectedSeatIndex = SelectedSeatIndex == index ? -1 : index;
    }

    private int GetSelectedTableNumber()
    {
        if (SelectedSeatIndex == -1) return -1;
        return (SelectedSeatIndex / (TableLength * 2)) + 1;
    }

    private string GetSelectedPerson()
    {
        if (SelectedSeatIndex == -1) return string.Empty;
        int tableIndex = SelectedSeatIndex / (TableLength * 2);
        int seatIndex = SelectedSeatIndex % (TableLength * 2);
        
        if (tableIndex >= Tables.Count || seatIndex >= Tables[tableIndex].Count)
            return "Empty";
            
        return Tables[tableIndex][seatIndex];
    }

    private List<string> GetAdjacentSeats(int seatIndex)
    {
        var adjacent = new List<string>();
        int tableIndex = seatIndex / (TableLength * 2);
        int localSeatIndex = seatIndex % (TableLength * 2);
        
        if (tableIndex >= Tables.Count) return adjacent;
        var currentTable = Tables[tableIndex];

        // Left neighbor
        if (localSeatIndex % TableLength != 0)
        {
            var leftIndex = localSeatIndex - 1;
            if (leftIndex >= 0 && leftIndex < currentTable.Count)
                adjacent.Add(currentTable[leftIndex]);
        }

        // Right neighbor
        if ((localSeatIndex + 1) % TableLength != 0)
        {
            var rightIndex = localSeatIndex + 1;
            if (rightIndex < currentTable.Count)
                adjacent.Add(currentTable[rightIndex]);
        }

        // Across table
        var acrossIndex = localSeatIndex < TableLength
            ? localSeatIndex + TableLength
            : localSeatIndex - TableLength;

        if (acrossIndex >= 0 && acrossIndex < currentTable.Count)
            adjacent.Add(currentTable[acrossIndex]);

        return adjacent;
    }

    private void CalculateSeating()
    {
        List<SeatRequest> seatRequests = CsvParser.ParseCsv(CsvData, NameColumnName, RequestedAdjacentPeopleColumnName);
        var clusters = new List<HashSet<int>>();
        try
        {
            clusters = SeatCalc.GetClusters(seatRequests, TableLength);
        } catch(Exception ex)
        {
            errorMessage = ex.Message;
            return;
        }   


        Tables.Clear();
        int totalPeople = seatRequests.Count;
        int peoplePerTable = TableLength * 2;
        int numberOfTables = (int)Math.Ceiling((double)totalPeople / peoplePerTable);

        Optimizer optimizer = new Optimizer(clusters, TableLength, seatRequests);
        int[] seats = optimizer.Optimize();

        var guests = seatRequests.ToDictionary(person => person.Id, person => person.Name);
        List<string> seatList = new List<string>();
        foreach (var seat in seats)
        {
            if (seat == -1)
            {
                seatList.Add("Empty");
                continue;
            }
            seatList.Add(guests[seat]);
        }

        for (int i = 0; i < numberOfTables; i++)
        {
            var tableGuests = seatList
                .Skip(i * peoplePerTable)
                .Take(peoplePerTable)
                .ToList();
            Tables.Add(tableGuests);
        }

        SelectedSeatIndex = -1;
    }
}